//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""DefaultMap"",
            ""id"": ""6d82144c-47d6-4b3d-8d96-5f13436113ff"",
            ""actions"": [
                {
                    ""name"": ""PrimaryInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""4fc0ee6d-e50c-4a4e-8d51-11c49669f47b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryInteraction"",
                    ""type"": ""Button"",
                    ""id"": ""66787617-6798-4f41-9266-202ce94a497e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""4a7e6c71-f6ef-4e42-ab32-a2b5a785be51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92cc438f-9bc8-4b28-8cdb-d687962cef0e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""PrimaryInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db85829d-9f19-4158-a48e-4876a2271c92"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6614a158-c016-48c7-a60e-d501d9c47b37"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DefaultMap
        m_DefaultMap = asset.FindActionMap("DefaultMap", throwIfNotFound: true);
        m_DefaultMap_PrimaryInteraction = m_DefaultMap.FindAction("PrimaryInteraction", throwIfNotFound: true);
        m_DefaultMap_SecondaryInteraction = m_DefaultMap.FindAction("SecondaryInteraction", throwIfNotFound: true);
        m_DefaultMap_Cursor = m_DefaultMap.FindAction("Cursor", throwIfNotFound: true);
    }

    ~@Input()
    {
        UnityEngine.Debug.Assert(!m_DefaultMap.enabled, "This will cause a leak and performance issues, Input.DefaultMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMap
    private readonly InputActionMap m_DefaultMap;
    private List<IDefaultMapActions> m_DefaultMapActionsCallbackInterfaces = new List<IDefaultMapActions>();
    private readonly InputAction m_DefaultMap_PrimaryInteraction;
    private readonly InputAction m_DefaultMap_SecondaryInteraction;
    private readonly InputAction m_DefaultMap_Cursor;
    public struct DefaultMapActions
    {
        private @Input m_Wrapper;
        public DefaultMapActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryInteraction => m_Wrapper.m_DefaultMap_PrimaryInteraction;
        public InputAction @SecondaryInteraction => m_Wrapper.m_DefaultMap_SecondaryInteraction;
        public InputAction @Cursor => m_Wrapper.m_DefaultMap_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMapActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Add(instance);
            @PrimaryInteraction.started += instance.OnPrimaryInteraction;
            @PrimaryInteraction.performed += instance.OnPrimaryInteraction;
            @PrimaryInteraction.canceled += instance.OnPrimaryInteraction;
            @SecondaryInteraction.started += instance.OnSecondaryInteraction;
            @SecondaryInteraction.performed += instance.OnSecondaryInteraction;
            @SecondaryInteraction.canceled += instance.OnSecondaryInteraction;
            @Cursor.started += instance.OnCursor;
            @Cursor.performed += instance.OnCursor;
            @Cursor.canceled += instance.OnCursor;
        }

        private void UnregisterCallbacks(IDefaultMapActions instance)
        {
            @PrimaryInteraction.started -= instance.OnPrimaryInteraction;
            @PrimaryInteraction.performed -= instance.OnPrimaryInteraction;
            @PrimaryInteraction.canceled -= instance.OnPrimaryInteraction;
            @SecondaryInteraction.started -= instance.OnSecondaryInteraction;
            @SecondaryInteraction.performed -= instance.OnSecondaryInteraction;
            @SecondaryInteraction.canceled -= instance.OnSecondaryInteraction;
            @Cursor.started -= instance.OnCursor;
            @Cursor.performed -= instance.OnCursor;
            @Cursor.canceled -= instance.OnCursor;
        }

        public void RemoveCallbacks(IDefaultMapActions instance)
        {
            if (m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMapActions @DefaultMap => new DefaultMapActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IDefaultMapActions
    {
        void OnPrimaryInteraction(InputAction.CallbackContext context);
        void OnSecondaryInteraction(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
}
